using System;
using CoreFoundation;
using Foundation;

namespace Laerdal.FFmpeg.iOS
{
	// @protocol ExecuteDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	[Preserve (AllMembers = true)]
	interface ExecuteDelegate
	{
		// @required -(void)executeCallback:(long)executionId :(int)returnCode;
		[Abstract]
		[Export ("executeCallback::")]
		void executeCallback(long executionId, int returnCode);
	}

	// @interface FFmpegExecution : NSObject
	[Protocol]
	[BaseType (typeof(NSObject))]
	[Preserve (AllMembers = true)]
	interface FFmpegExecution
	{
		// -(instancetype)initWithExecutionId:(long)newExecutionId andArguments:(NSArray *)arguments;
		[Export ("initWithExecutionId:andArguments:")]
		IntPtr Constructor (long newExecutionId, NSString[] arguments);

		// -(NSDate *)getStartTime;
		[Export ("getStartTime")]
		NSDate StartTime { get; }

		// -(long)getExecutionId;
		[Export ("getExecutionId")]
		long ExecutionId { get; }

		// -(NSString *)getCommand;
		[Export ("getCommand")]
		string Command { get; }
	}

	// @protocol LogDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	[Preserve (AllMembers = true)]
	interface LogDelegate
	{
		// @required -(void)logCallback:(long)executionId :(int)level :(NSString *)message;
		[Abstract]
		[Export ("logCallback:::")]
		void LogCallback(long executionId, int level, string message);
	}

	// @interface StreamInformation : NSObject
	[BaseType (typeof(NSObject))]
	[Protocol]
	[Preserve (AllMembers = true)]
	interface StreamInformation
	{
		// -(instancetype)init:(NSDictionary *)streamDictionary;
		[Export ("init:")]
		IntPtr Constructor (NSDictionary streamDictionary);

		// -(NSNumber *)getIndex;
		[Export ("getIndex")]
		NSNumber Index { get; }

		// -(NSString *)getType;
		[Export ("getType")]
		string Type { get; }

		// -(NSString *)getCodec;
		[Export ("getCodec")]
		string Codec { get; }

		// -(NSString *)getFullCodec;
		[Export ("getFullCodec")]
		string FullCodec { get; }

		// -(NSString *)getFormat;
		[Export ("getFormat")]
		string Format { get; }

		// -(NSNumber *)getWidth;
		[Export ("getWidth")]
		NSNumber Width { get; }

		// -(NSNumber *)getHeight;
		[Export ("getHeight")]
		NSNumber Height { get; }

		// -(NSString *)getBitrate;
		[Export ("getBitrate")]
		string Bitrate { get; }

		// -(NSString *)getSampleRate;
		[Export ("getSampleRate")]
		string SampleRate { get; }

		// -(NSString *)getSampleFormat;
		[Export ("getSampleFormat")]
		string SampleFormat { get; }

		// -(NSString *)getChannelLayout;
		[Export ("getChannelLayout")]
		string ChannelLayout { get; }

		// -(NSString *)getSampleAspectRatio;
		[Export ("getSampleAspectRatio")]
		string SampleAspectRatio { get; }

		// -(NSString *)getDisplayAspectRatio;
		[Export ("getDisplayAspectRatio")]
		string DisplayAspectRatio { get; }

		// -(NSString *)getAverageFrameRate;
		[Export ("getAverageFrameRate")]
		string AverageFrameRate { get; }

		// -(NSString *)getRealFrameRate;
		[Export ("getRealFrameRate")]
		string RealFrameRate { get; }

		// -(NSString *)getTimeBase;
		[Export ("getTimeBase")]
		string TimeBase { get; }

		// -(NSString *)getCodecTimeBase;
		[Export ("getCodecTimeBase")]
		string CodecTimeBase { get; }

		// -(NSDictionary *)getTags;
		[Export ("getTags")]
		NSDictionary Tags { get; }

		// -(NSString *)getStringProperty:(NSString *)key;
		[Export ("getStringProperty:")]
		string GetStringProperty (string key);

		// -(NSNumber *)getNumberProperty:(NSString *)key;
		[Export ("getNumberProperty:")]
		NSNumber GetNumberProperty (string key);

		// -(NSDictionary *)getProperties:(NSString *)key;
		[Export ("getProperties:")]
		NSDictionary GetProperties (string key);

		// -(NSDictionary *)getAllProperties;
		[Export ("getAllProperties")]
		NSDictionary AllProperties { get; }
	}

	// @interface MediaInformation : NSObject
	[BaseType (typeof(NSObject))]
	[Protocol]
	[Preserve (AllMembers = true)]
	interface MediaInformation
	{
		// -(instancetype)init:(NSDictionary *)mediaDictionary withStreams:(NSArray *)streams;
		[Export ("init:withStreams:")]
		IntPtr Constructor (NSDictionary mediaDictionary, NSObject[] streams);

		// -(NSString *)getFilename;
		[Export ("getFilename")]
		string Filename { get; }

		// -(NSString *)getFormat;
		[Export ("getFormat")]
		string Format { get; }

		// -(NSString *)getLongFormat;
		[Export ("getLongFormat")]
		string LongFormat { get; }

		// -(NSString *)getDuration;
		[Export ("getDuration")]
		string Duration { get; }

		// -(NSString *)getStartTime;
		[Export ("getStartTime")]
		string StartTime { get; }

		// -(NSString *)getSize;
		[Export ("getSize")]
		string Size { get; }

		// -(NSString *)getBitrate;
		[Export ("getBitrate")]
		string Bitrate { get; }

		// -(NSDictionary *)getTags;
		[Export ("getTags")]
		NSDictionary Tags { get; }

		// -(NSArray *)getStreams;
		[Export ("getStreams")]
		NSObject[] Streams { get; }

		// -(NSString *)getStringProperty:(NSString *)key;
		[Export ("getStringProperty:")]
		string GetStringProperty (string key);

		// -(NSNumber *)getNumberProperty:(NSString *)key;
		[Export ("getNumberProperty:")]
		NSNumber GetNumberProperty (string key);

		// -(NSDictionary *)getProperties:(NSString *)key;
		[Export ("getProperties:")]
		NSDictionary GetProperties (string key);

		// -(NSDictionary *)getMediaProperties;
		[Export ("getMediaProperties")]
		NSDictionary MediaProperties { get; }

		// -(NSDictionary *)getAllProperties;
		[Export ("getAllProperties")]
		NSDictionary AllProperties { get; }
	}

	// @interface MediaInformationParser : NSObject
	[BaseType (typeof(NSObject))]
	[Protocol]
	[Preserve (AllMembers = true)]
	interface MediaInformationParser
	{
		// +(MediaInformation *)from:(NSString *)ffprobeJsonOutput;
		[Static]
		[Export ("from:")]
		MediaInformation From (string ffprobeJsonOutput);

		// +(MediaInformation *)from:(NSString *)ffprobeJsonOutput with:(NSError *)error;
		[Static]
		[Export ("from:with:")]
		MediaInformation From (string ffprobeJsonOutput, NSError error);
	}

	// @interface MobileFFmpeg : NSObject
	[BaseType (typeof(NSObject))]
	[Protocol]
	[Preserve (AllMembers = true)]
	interface MobileFFmpeg
	{
		// +(int)executeWithArguments:(NSArray *)arguments;
		[Static]
		[Export ("executeWithArguments:")]
		int ExecuteWithArguments (NSString[] arguments);

		// +(int)executeWithArgumentsAsync:(NSArray *)arguments withCallback:(id<ExecuteDelegate>)delegate;
		[Static]
		[Export ("executeWithArgumentsAsync:withCallback:")]
		int ExecuteWithArgumentsAsync (NSString[] arguments, ExecuteDelegate @delegate);

		// +(int)executeWithArgumentsAsync:(NSArray *)arguments withCallback:(id<ExecuteDelegate>)delegate andDispatchQueue:(dispatch_queue_t)queue;
		[Static]
		[Export ("executeWithArgumentsAsync:withCallback:andDispatchQueue:")]
		int ExecuteWithArgumentsAsync (NSString[] arguments, ExecuteDelegate @delegate, DispatchQueue queue);

		// +(int)execute:(NSString *)command;
		[Static]
		[Export ("execute:")]
		int Execute (string command);

		// +(int)executeAsync:(NSString *)command withCallback:(id<ExecuteDelegate>)delegate;
		[Static]
		[Export ("executeAsync:withCallback:")]
		int ExecuteAsync (string command, ExecuteDelegate @delegate);

		// +(int)executeAsync:(NSString *)command withCallback:(id<ExecuteDelegate>)delegate andDispatchQueue:(dispatch_queue_t)queue;
		[Static]
		[Export ("executeAsync:withCallback:andDispatchQueue:")]
		int ExecuteAsync (string command, ExecuteDelegate @delegate, DispatchQueue queue);

		// +(int)execute:(NSString *)command delimiter:(NSString *)delimiter __attribute__((deprecated("")));
		[Static]
		[Export ("execute:delimiter:")]
		int Execute (string command, string delimiter);

		// +(void)cancel;
		[Static]
		[Export ("cancel")]
		void Cancel ();

		// +(void)cancel:(long)executionId;
		[Static]
		[Export ("cancel:")]
		void Cancel (long executionId);

		// +(NSArray *)parseArguments:(NSString *)command;
		[Static]
		[Export ("parseArguments:")]
		NSString[] ParseArguments (string command);

		// +(NSString *)argumentsToString:(NSArray *)arguments;
		[Static]
		[Export ("argumentsToString:")]
		string ArgumentsToString (NSString[] arguments);

		// +(NSArray *)listExecutions;
		[Static]
		[Export ("listExecutions")]
		FFmpegExecution[] ListExecutions { get; }
	}

	// @interface Statistics : NSObject
	[BaseType (typeof(NSObject))]
	[Protocol]
	[Preserve (AllMembers = true)]
	interface Statistics
	{
		// -(instancetype)initWithId:(long)currentExecutionId videoFrameNumber:(int)newVideoFrameNumber fps:(float)newVideoFps quality:(float)newVideoQuality size:(int64_t)newSize time:(int)newTime bitrate:(double)newBitrate speed:(double)newSpeed;
		[Export ("initWithId:videoFrameNumber:fps:quality:size:time:bitrate:speed:")]
		IntPtr Constructor (long currentExecutionId, int newVideoFrameNumber, float newVideoFps, float newVideoQuality, long newSize, int newTime, double newBitrate, double newSpeed);

		// -(void)update:(Statistics *)statistics;
		[Export ("update:")]
		void Update (Statistics statistics);

		// -(long)getExecutionId;
		[Export ("getExecutionId")]
		long ExecutionId { get; }

		// -(int)getVideoFrameNumber;
		[Export ("getVideoFrameNumber")]
		int VideoFrameNumber { get; }

		// -(float)getVideoFps;
		[Export ("getVideoFps")]
		float VideoFps { get; }

		// -(float)getVideoQuality;
		[Export ("getVideoQuality")]
		float VideoQuality { get; }

		// -(long)getSize;
		[Export ("getSize")]
		long Size { get; }

		// -(int)getTime;
		[Export ("getTime")]
		int Time { get; }

		// -(double)getBitrate;
		[Export ("getBitrate")]
		double Bitrate { get; }

		// -(double)getSpeed;
		[Export ("getSpeed")]
		double Speed { get; }
	}

	// @protocol StatisticsDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	[Preserve (AllMembers = true)]
	interface StatisticsDelegate
	{
		// @required -(void)statisticsCallback:(Statistics *)statistics;
		[Abstract]
		[Export ("statisticsCallback:")]
		void StatisticsCallback (Statistics statistics);
	}

	// @interface MobileFFmpegConfig : NSObject
	[BaseType (typeof(NSObject))]
	[Preserve (AllMembers = true)]
	interface MobileFFmpegConfig
	{
		// +(void)enableRedirection;
		[Static]
		[Export ("enableRedirection")]
		void EnableRedirection ();

		// +(void)disableRedirection;
		[Static]
		[Export ("disableRedirection")]
		void DisableRedirection ();

		// +(int)getLogLevel;
		[Static]
		[Export ("getLogLevel")]
		int LogLevel { get; }

		// +(void)setLogLevel:(int)level;
		[Static]
		[Export ("setLogLevel:")]
		void SetLogLevel (int level);

		// +(NSString *)logLevelToString:(int)level;
		[Static]
		[Export ("logLevelToString:")]
		string LogLevelToString (int level);

		// +(void)setLogDelegate:(id<LogDelegate>)newLogDelegate;
		[Static]
		[Export ("setLogDelegate:")]
		void SetLogDelegate (LogDelegate newLogDelegate);

		// +(void)setStatisticsDelegate:(id<StatisticsDelegate>)newStatisticsDelegate;
		[Static]
		[Export ("setStatisticsDelegate:")]
		void SetStatisticsDelegate (StatisticsDelegate newStatisticsDelegate);

		// +(Statistics *)getLastReceivedStatistics;
		[Static]
		[Export ("getLastReceivedStatistics")]
		Statistics LastReceivedStatistics { get; }

		// +(void)resetStatistics;
		[Static]
		[Export ("resetStatistics")]
		void ResetStatistics ();

		// +(void)setFontconfigConfigurationPath:(NSString *)path;
		[Static]
		[Export ("setFontconfigConfigurationPath:")]
		void SetFontconfigConfigurationPath (string path);

		// +(void)setFontDirectory:(NSString *)fontDirectoryPath with:(NSDictionary *)fontNameMapping;
		[Static]
		[Export ("setFontDirectory:with:")]
		void SetFontDirectory (string fontDirectoryPath, NSDictionary fontNameMapping);

		// +(NSString *)getPackageName;
		[Static]
		[Export ("getPackageName")]
		string PackageName { get; }

		// +(NSArray *)getExternalLibraries;
		[Static]
		[Export ("getExternalLibraries")]
		NSString[] ExternalLibraries { get; }

		// +(NSString *)registerNewFFmpegPipe;
		[Static]
		[Export ("registerNewFFmpegPipe")]
		string RegisterNewFFmpegPipe();

		// +(void)closeFFmpegPipe:(NSString *)ffmpegPipePath;
		[Static]
		[Export ("closeFFmpegPipe:")]
		void CloseFFmpegPipe (string ffmpegPipePath);

		// +(NSString *)getFFmpegVersion;
		[Static]
		[Export ("getFFmpegVersion")]
		string FFmpegVersion { get; }

		// +(NSString *)getVersion;
		[Static]
		[Export ("getVersion")]
		string Version { get; }

		// +(NSString *)getBuildDate;
		[Static]
		[Export ("getBuildDate")]
		string BuildDate { get; }

		// +(int)getLastReturnCode;
		[Static]
		[Export ("getLastReturnCode")]
		int LastReturnCode { get; }

		// +(NSString *)getLastCommandOutput;
		[Static]
		[Export ("getLastCommandOutput")]
		string LastCommandOutput { get; }

		// +(void)ignoreSignal:(int)signum;
		[Static]
		[Export ("ignoreSignal:")]
		void IgnoreSignal (int signum);
	}

	// @interface MobileFFprobe : NSObject
	[BaseType (typeof(NSObject))]
	[Protocol]
	[Preserve (AllMembers = true)]
	interface MobileFFprobe
	{
		// +(int)executeWithArguments:(NSArray *)arguments;
		[Static]
		[Export ("executeWithArguments:")]
		int ExecuteWithArguments (NSString[] arguments);

		// +(int)execute:(NSString *)command;
		[Static]
		[Export ("execute:")]
		int Execute (string command);

		// +(MediaInformation *)getMediaInformation:(NSString *)path;
		[Static]
		[Export ("getMediaInformation:")]
		MediaInformation GetMediaInformation (string path);

		// +(MediaInformation *)getMediaInformationFromCommand:(NSString *)command;
		[Static]
		[Export ("getMediaInformationFromCommand:")]
		MediaInformation GetMediaInformationFromCommand (string command);

		// +(MediaInformation *)getMediaInformation:(NSString *)path timeout:(long)timeout __attribute__((deprecated("")));
		[Static]
		[Export ("getMediaInformation:timeout:")]
		MediaInformation GetMediaInformation (string path, long timeout);
	}
}
